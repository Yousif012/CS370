# MIPS code generated by Compilers class

.data

_L0: .asciiz "The following should be 13\n"
_L1: .asciiz "\n"
_L2: .asciiz "The following should be 3\n"
_L3: .asciiz "\n"
.align 2
.text


main:			# function definition
	move $a1, $sp		# Activation Record carve out copy SP
	subi $a1, $a1, 116		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record


	li $a0, 0		# expression is a constant
	sw $a0, 92($sp)		# Assign store RHS temporarily
	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a1, 92($sp)		# Assign get RHS temporarily
	sw $a1, ($a0)		# Assign new value to variable




	# Enter while statement condition
	_B0:		
	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 96($sp)		# expression store LHS temporarily
	li $a0, 19		# expression is a constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 96($sp)		# expression restore LHS from memory
	slt $a0, $a0, $a1		# Compare $a0 and $a2 and store result in $a0
	beq $a0, $0, _B0_exit		


	# Enter while statement body
	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 100($sp)		# expression store LHS temporarily
	li $a0, 1		# expression is a constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 100($sp)		# expression restore LHS from memory
	add $a0, $a0, $a1		# EXPR ADD
	sw $a0, 104($sp)		# Assign store RHS temporarily
	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# VAR copy index array in a1
	sll $a1, $a1 2		# muliply the index by wordszie via SLL
	move $a0, $sp		# VAR copy index array in a1
	addi $a0, $a0, 12		# VAR local stack pointer plus offset
	add $a0, $a0, $a1		# VAR array add internal offset
	lw $a1, 104($sp)		# Assign get RHS temporarily
	sw $a1, ($a0)		# Assign new value to variable


	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 108($sp)		# expression store LHS temporarily
	li $a0, 1		# expression is a constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 108($sp)		# expression restore LHS from memory
	add $a0, $a0, $a1		# EXPR ADD
	sw $a0, 112($sp)		# Assign store RHS temporarily
	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a1, 112($sp)		# Assign get RHS temporarily
	sw $a1, ($a0)		# Assign new value to variable


	b _B0		# continue while statement
	_B0_exit:		# Continue program


	li $a0, 0		# expression is a constant
	sw $a0, 100($sp)		# Assign store RHS temporarily
	li $a0, 19		# expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1, $a1 2		# muliply the index by wordszie via SLL
	move $a0, $sp		# VAR copy index array in a1
	addi $a0, $a0, 12		# VAR local stack pointer plus offset
	add $a0, $a0, $a1		# VAR array add internal offset
	lw $a1, 100($sp)		# Assign get RHS temporarily
	sw $a1, ($a0)		# Assign new value to variable


	la $a0, _L0		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	li $a0, 10		# expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1, $a1 2		# muliply the index by wordszie via SLL
	move $a0, $sp		# VAR copy index array in a1
	addi $a0, $a0, 12		# VAR local stack pointer plus offset
	add $a0, $a0, $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# VAR copy index array in a1
	sll $a1, $a1 2		# muliply the index by wordszie via SLL
	move $a0, $sp		# VAR copy index array in a1
	addi $a0, $a0, 12		# VAR local stack pointer plus offset
	add $a0, $a0, $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# VAR copy index array in a1
	sll $a1, $a1 2		# muliply the index by wordszie via SLL
	move $a0, $sp		# VAR copy index array in a1
	addi $a0, $a0, 12		# VAR local stack pointer plus offset
	add $a0, $a0, $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a number
	syscall		# call write number


	la $a0, _L1		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	la $a0, _L2		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	li $a0, 10		# expression is a constant
	sw $a0, 104($sp)		# expression store LHS temporarily
	li $a0, 9		# expression is a constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 104($sp)		# expression restore LHS from memory
	add $a0, $a0, $a1		# EXPR ADD
	move $a1, $a0		# VAR copy index array in a1
	sll $a1, $a1 2		# muliply the index by wordszie via SLL
	move $a0, $sp		# VAR copy index array in a1
	addi $a0, $a0, 12		# VAR local stack pointer plus offset
	add $a0, $a0, $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# VAR copy index array in a1
	sll $a1, $a1 2		# muliply the index by wordszie via SLL
	move $a0, $sp		# VAR copy index array in a1
	addi $a0, $a0, 12		# VAR local stack pointer plus offset
	add $a0, $a0, $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# VAR copy index array in a1
	sll $a1, $a1 2		# muliply the index by wordszie via SLL
	move $a0, $sp		# VAR copy index array in a1
	addi $a0, $a0, 12		# VAR local stack pointer plus offset
	add $a0, $a0, $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# VAR copy index array in a1
	sll $a1, $a1 2		# muliply the index by wordszie via SLL
	move $a0, $sp		# VAR copy index array in a1
	addi $a0, $a0, 12		# VAR local stack pointer plus offset
	add $a0, $a0, $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a number
	syscall		# call write number


	la $a0, _L3		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	li $v0, 10		# Exit from Main
	syscall		# EXIT everything
