# MIPS code generated by Compilers class

.data

_L0: .asciiz "\n"
.align 2
.text


.globl main


f:			# function definition
	move $a1, $sp		# Activation Record carve out copy SP
	subi $a1, $a1, 20		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record


	sw $t0, 8($sp)		# Param store address in $t register
	sw $t1, 12($sp)		# Param store address in $t register


	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 16($sp)		# expression store LHS temporarily
	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 16($sp)		# expression restore LHS from memory
	mult $a1, $a0		# EXPR MULT
	mflo $a0		# Store multiplication result in $a0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump back to caller


main:			# function definition
	move $a1, $sp		# Activation Record carve out copy SP
	subi $a1, $a1, 36		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record


	li $a0, 2		# expression is a constant
	sw $a0, 20($sp)		# Assign store RHS temporarily
	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a1, 20($sp)		# Assign get RHS temporarily
	sw $a1, ($a0)		# Assign new value to variable


	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a number
	syscall		# call write number


	la $a0, _L0		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 28($sp)		# Call store args temporarily
	li $a0, 2		# expression is a constant
	sw $a0, 24($sp)		# Call store args temporarily
	lw $a0, 28($sp)		# Call store address in $a0
	move $t0, $a0		# Call store args in $t registers
	lw $a0, 24($sp)		# Call store address in $a0
	move $t1, $a0		# Call store args in $t registers
	jal f		# Jump to function


	sw $a0, 32($sp)		# Assign store RHS temporarily
	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a1, 32($sp)		# Assign get RHS temporarily
	sw $a1, ($a0)		# Assign new value to variable


	move $a0, $sp		# VAR local make a copy of stackpointer
	addi $a0, $a0, 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a number
	syscall		# call write number


	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	li $v0, 10		# Exit from Main
	syscall		# EXIT everything
