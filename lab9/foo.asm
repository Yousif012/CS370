# MIPS code generated by Compilers class

.data

_L0: .asciiz "hello\n"
_L1: .asciiz "world\n"
_L2: .asciiz "\n"
_L3: .asciiz "enter a number "
_L4: .asciiz "you entered: "
_L5: .asciiz "\n"
_L6: .asciiz "y is bigger than or equal to 3\n"
_L7: .asciiz "y is bigger than 3\n"
_L8: .asciiz "y is less than or equal to 3\n"
_L9: .asciiz "y is less than 3\n"
_L10: .asciiz "y is not 3\n"
_L11: .asciiz "y is 3\n"
.align 2
y: .space 4
Z: .space 400
.text


main:			# function definition
	move $a1, $sp		# Activation Record carve out copy SP
	subi $a1, $a1, 32		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record


	la $a0, _L0		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	la $a0, _L1		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	li $a0, 123		# expression is a constant
	li $v0, 1		# About to print a number
	syscall		# call write number


	la $a0, _L2		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	la $a0, _L3		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	la $a0, y		# EMIT Var global variable
	li $v0, 5		# About to read a value
	syscall		# read in value $v0 now has the read value
	sw $v0 ($a0)		# store read in value to memory


	la $a0, _L4		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	la $a0, y		# EMIT Var global variable
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a number
	syscall		# call write number


	la $a0, _L5		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	la $a0, y		# EMIT Var global variable
	lw $a0, ($a0)		# Expression is a VAR
	addi $a2, $a0, 0		# Load location of variable into $a1
	li $a0, 3		# expression is a constant
	seq $a0, $a0, $a2		# Compare $a0 and $a2 and store result in $a0
	li $a1, 1		# Load 1 into $a1
	beq $a0, $a1, _B0		# Start conditional statement


	# Enter else statement body
	b _B0_exit		# Exit if statement


	# Enter if statement body
	_B0:		
	la $a0, _L11		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	_B0_exit:		# Continue program


	la $a0, y		# EMIT Var global variable
	lw $a0, ($a0)		# Expression is a VAR
	addi $a2, $a0, 0		# Load location of variable into $a1
	li $a0, 3		# expression is a constant
	sne $a0, $a0, $a2		# Compare $a0 and $a2 and store result in $a0
	li $a1, 1		# Load 1 into $a1
	beq $a0, $a1, _B1		# Start conditional statement


	# Enter else statement body
	b _B1_exit		# Exit if statement


	# Enter if statement body
	_B1:		
	la $a0, _L10		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	_B1_exit:		# Continue program


	la $a0, y		# EMIT Var global variable
	lw $a0, ($a0)		# Expression is a VAR
	addi $a2, $a0, 0		# Load location of variable into $a1
	li $a0, 3		# expression is a constant
	slt $a0, $a2, $a0		# Compare $a0 and $a2 and store result in $a0
	li $a1, 1		# Load 1 into $a1
	beq $a0, $a1, _B2		# Start conditional statement


	# Enter else statement body
	b _B2_exit		# Exit if statement


	# Enter if statement body
	_B2:		
	la $a0, _L9		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	_B2_exit:		# Continue program


	la $a0, y		# EMIT Var global variable
	lw $a0, ($a0)		# Expression is a VAR
	addi $a2, $a0, 0		# Load location of variable into $a1
	li $a0, 3		# expression is a constant
	sle $a0, $a2, $a0		# Compare $a0 and $a2 and store result in $a0
	li $a1, 1		# Load 1 into $a1
	beq $a0, $a1, _B3		# Start conditional statement


	# Enter else statement body
	b _B3_exit		# Exit if statement


	# Enter if statement body
	_B3:		
	la $a0, _L8		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	_B3_exit:		# Continue program


	la $a0, y		# EMIT Var global variable
	lw $a0, ($a0)		# Expression is a VAR
	addi $a2, $a0, 0		# Load location of variable into $a1
	li $a0, 3		# expression is a constant
	sgt $a0, $a2, $a0		# Compare $a0 and $a2 and store result in $a0
	li $a1, 1		# Load 1 into $a1
	beq $a0, $a1, _B4		# Start conditional statement


	# Enter else statement body
	b _B4_exit		# Exit if statement


	# Enter if statement body
	_B4:		
	la $a0, _L7		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	_B4_exit:		# Continue program


	la $a0, y		# EMIT Var global variable
	lw $a0, ($a0)		# Expression is a VAR
	addi $a2, $a0, 0		# Load location of variable into $a1
	li $a0, 3		# expression is a constant
	sge $a0, $a2, $a0		# Compare $a0 and $a2 and store result in $a0
	li $a1, 1		# Load 1 into $a1
	beq $a0, $a1, _B5		# Start conditional statement


	# Enter else statement body
	b _B5_exit		# Exit if statement


	# Enter if statement body
	_B5:		
	la $a0, _L6		# The string address
	li $v0, 4		# About to print a string
	syscall		# call write string


	_B5_exit:		# Continue program


	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	li $v0, 10		# Exit from Main
	syscall		# EXIT everything
